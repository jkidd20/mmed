// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fastLm
List fastLm(const arma::vec& y, const arma::mat& X);
RcppExport SEXP _mmed_fastLm(SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(fastLm(y, X));
    return rcpp_result_gen;
END_RCPP
}
// fastLmSig
double fastLmSig(const arma::vec& y, const arma::mat& X);
RcppExport SEXP _mmed_fastLmSig(SEXP ySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(fastLmSig(y, X));
    return rcpp_result_gen;
END_RCPP
}
// fastLmSig_int
double fastLmSig_int(const arma::vec& y, const arma::mat& X, const arma::vec& inter);
RcppExport SEXP _mmed_fastLmSig_int(SEXP ySEXP, SEXP XSEXP, SEXP interSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type inter(interSEXP);
    rcpp_result_gen = Rcpp::wrap(fastLmSig_int(y, X, inter));
    return rcpp_result_gen;
END_RCPP
}
// calc_a_val
double calc_a_val(const double& gamma, const double& sig2, const double& tau2, const double& psi, const double& G);
RcppExport SEXP _mmed_calc_a_val(SEXP gammaSEXP, SEXP sig2SEXP, SEXP tau2SEXP, SEXP psiSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_a_val(gamma, sig2, tau2, psi, G));
    return rcpp_result_gen;
END_RCPP
}
// calc_b_val
double calc_b_val(const double& a, double const& gamma, double const& sig2, double const& tau2, const double& y, const double& G, const arma::rowvec& Z, const arma::rowvec& X, const arma::vec& beta, const arma::vec& ksi, const double& psi);
RcppExport SEXP _mmed_calc_b_val(SEXP aSEXP, SEXP gammaSEXP, SEXP sig2SEXP, SEXP tau2SEXP, SEXP ySEXP, SEXP GSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP ksiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< double const& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double const& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double const& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_b_val(a, gamma, sig2, tau2, y, G, Z, X, beta, ksi, psi));
    return rcpp_result_gen;
END_RCPP
}
// calc_expectation
List calc_expectation(const arma::vec& beta, const double& gamma, const double& psi, const double& sig2, const arma::vec& ksi, const double& tau2, const arma::vec& Y, const arma::vec& G, const arma::mat& Z, const arma::mat& X, const arma::vec& S, const arma::vec& R, const arma::vec& LLD, const arma::vec& ULD, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_expectation(SEXP betaSEXP, SEXP gammaSEXP, SEXP psiSEXP, SEXP sig2SEXP, SEXP ksiSEXP, SEXP tau2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP SSEXP, SEXP RSEXP, SEXP LLDSEXP, SEXP ULDSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LLD(LLDSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ULD(ULDSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_expectation(beta, gamma, psi, sig2, ksi, tau2, Y, G, Z, X, S, R, LLD, ULD, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_beta_gamma_psi
arma::vec calc_beta_gamma_psi(const arma::vec& Y, const arma::mat& Z, const arma::vec& G, const arma::vec& ES, const arma::vec& ES2, const bool& interaction);
RcppExport SEXP _mmed_calc_beta_gamma_psi(SEXP YSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP ESSEXP, SEXP ES2SEXP, SEXP interactionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES(ESSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type interaction(interactionSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_beta_gamma_psi(Y, Z, G, ES, ES2, interaction));
    return rcpp_result_gen;
END_RCPP
}
// calc_sig2
double calc_sig2(const double& gamma, const double& psi, const bool& interaction, const arma::vec& beta, const arma::vec& Y, const arma::vec& G, const arma::mat& Z, const arma::vec& ES, const arma::vec& ES2);
RcppExport SEXP _mmed_calc_sig2(SEXP gammaSEXP, SEXP psiSEXP, SEXP interactionSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP GSEXP, SEXP ZSEXP, SEXP ESSEXP, SEXP ES2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const bool& >::type interaction(interactionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES(ESSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_sig2(gamma, psi, interaction, beta, Y, G, Z, ES, ES2));
    return rcpp_result_gen;
END_RCPP
}
// calc_ksi
arma::vec calc_ksi(const arma::mat& X, const arma::vec& ES);
RcppExport SEXP _mmed_calc_ksi(SEXP XSEXP, SEXP ESSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES(ESSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ksi(X, ES));
    return rcpp_result_gen;
END_RCPP
}
// calc_tau2
double calc_tau2(const arma::vec& ksi, const arma::mat& X, const arma::vec ES, const arma::vec ES2);
RcppExport SEXP _mmed_calc_tau2(SEXP ksiSEXP, SEXP XSEXP, SEXP ESSEXP, SEXP ES2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ES(ESSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ES2(ES2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_tau2(ksi, X, ES, ES2));
    return rcpp_result_gen;
END_RCPP
}
// oneMed_EM
List oneMed_EM(const arma::vec& Y, const arma::vec& G, const arma::vec& S, const arma::vec& R, const arma::vec& lowerS, const arma::vec& upperS, const arma::mat& Z, const arma::mat& X, const bool interaction, double convLimit, double iterationLimit, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_oneMed_EM(SEXP YSEXP, SEXP GSEXP, SEXP SSEXP, SEXP RSEXP, SEXP lowerSSEXP, SEXP upperSSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP interactionSEXP, SEXP convLimitSEXP, SEXP iterationLimitSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS(lowerSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS(upperSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type interaction(interactionSEXP);
    Rcpp::traits::input_parameter< double >::type convLimit(convLimitSEXP);
    Rcpp::traits::input_parameter< double >::type iterationLimit(iterationLimitSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(oneMed_EM(Y, G, S, R, lowerS, upperS, Z, X, interaction, convLimit, iterationLimit, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_Q_matrix
arma::mat calc_Q_matrix(const double& sig2, const double& tau2, const arma::mat& Z, const arma::mat& X, const arma::vec& G, const arma::vec& ES, const arma::vec& ES2, const bool& interaction);
RcppExport SEXP _mmed_calc_Q_matrix(SEXP sig2SEXP, SEXP tau2SEXP, SEXP ZSEXP, SEXP XSEXP, SEXP GSEXP, SEXP ESSEXP, SEXP ES2SEXP, SEXP interactionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES(ESSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type interaction(interactionSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Q_matrix(sig2, tau2, Z, X, G, ES, ES2, interaction));
    return rcpp_result_gen;
END_RCPP
}
// calc_V_mat
arma::mat calc_V_mat(const double& gamma, const double& psi, const double& sig2, double tau2, const double& Y, const double& G, const arma::vec& beta, const arma::vec& ksi, const arma::rowvec& Z, const arma::rowvec& X);
RcppExport SEXP _mmed_calc_V_mat(SEXP gammaSEXP, SEXP psiSEXP, SEXP sig2SEXP, SEXP tau2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP ksiSEXP, SEXP ZSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_V_mat(gamma, psi, sig2, tau2, Y, G, beta, ksi, Z, X));
    return rcpp_result_gen;
END_RCPP
}
// calc_U_mat
arma::mat calc_U_mat(const double& gamma, const double& psi, const double& sig2, double tau2, const arma::vec& beta, const arma::vec& ksi, const double& Y, const double& G, const double& R, const arma::rowvec& Z, const arma::rowvec& X, const double& LLD, const double& ULD, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_U_mat(SEXP gammaSEXP, SEXP psiSEXP, SEXP sig2SEXP, SEXP tau2SEXP, SEXP betaSEXP, SEXP ksiSEXP, SEXP YSEXP, SEXP GSEXP, SEXP RSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP LLDSEXP, SEXP ULDSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD(LLDSEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD(ULDSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_U_mat(gamma, psi, sig2, tau2, beta, ksi, Y, G, R, Z, X, LLD, ULD, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_OMEGA
arma::mat calc_OMEGA(const arma::vec& Y, const arma::vec& G, const arma::vec& S, const arma::vec& R, const arma::vec& lowerS, const arma::vec& upperS, const arma::vec& beta, const double& gamma, const double& psi, const double& sig2, const arma::vec& ksi, const double& tau2, const arma::mat& Z, const arma::mat& X, const bool& interaction, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_OMEGA(SEXP YSEXP, SEXP GSEXP, SEXP SSEXP, SEXP RSEXP, SEXP lowerSSEXP, SEXP upperSSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP psiSEXP, SEXP sig2SEXP, SEXP ksiSEXP, SEXP tau2SEXP, SEXP ZSEXP, SEXP XSEXP, SEXP interactionSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS(lowerSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS(upperSSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool& >::type interaction(interactionSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_OMEGA(Y, G, S, R, lowerS, upperS, beta, gamma, psi, sig2, ksi, tau2, Z, X, interaction, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// deltaCI_one
List deltaCI_one(const long double& mu1, const long double& sig1, const long double& mu2, const long double& sig2, const long double& sig12, const double& indL, const long double& mu3, const long double& sig3, const long double& sig13, const long double& sig23, const double alpha);
RcppExport SEXP _mmed_deltaCI_one(SEXP mu1SEXP, SEXP sig1SEXP, SEXP mu2SEXP, SEXP sig2SEXP, SEXP sig12SEXP, SEXP indLSEXP, SEXP mu3SEXP, SEXP sig3SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long double& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(deltaCI_one(mu1, sig1, mu2, sig2, sig12, indL, mu3, sig3, sig13, sig23, alpha));
    return rcpp_result_gen;
END_RCPP
}
// bootstrapCI_one
List bootstrapCI_one(const arma::vec& y, const arma::vec& g, const arma::vec& s, const arma::vec& r, const arma::mat& Z, const arma::mat& X, const arma::vec& lowers, const arma::vec& uppers, const double& delta, const double& alpha, const bool& interaction, const double& indL, const unsigned int bootStrapN, double convLimit, const double iterationLimit, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_bootstrapCI_one(SEXP ySEXP, SEXP gSEXP, SEXP sSEXP, SEXP rSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP lowersSEXP, SEXP uppersSEXP, SEXP deltaSEXP, SEXP alphaSEXP, SEXP interactionSEXP, SEXP indLSEXP, SEXP bootStrapNSEXP, SEXP convLimitSEXP, SEXP iterationLimitSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowers(lowersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type uppers(uppersSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type interaction(interactionSEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type bootStrapN(bootStrapNSEXP);
    Rcpp::traits::input_parameter< double >::type convLimit(convLimitSEXP);
    Rcpp::traits::input_parameter< const double >::type iterationLimit(iterationLimitSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapCI_one(y, g, s, r, Z, X, lowers, uppers, delta, alpha, interaction, indL, bootStrapN, convLimit, iterationLimit, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// mcCI_one
List mcCI_one(const arma::vec& mu, const arma::mat& sig, const double& delta, const double& indL, const double nIt, const double alpha);
RcppExport SEXP _mmed_mcCI_one(SEXP muSEXP, SEXP sigSEXP, SEXP deltaSEXP, SEXP indLSEXP, SEXP nItSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const double >::type nIt(nItSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcCI_one(mu, sig, delta, indL, nIt, alpha));
    return rcpp_result_gen;
END_RCPP
}
// mcp_calc_one
double mcp_calc_one(const arma::vec mu, const arma::mat sig, const double delta, const double& indL, const double nIt, const double itPer);
RcppExport SEXP _mmed_mcp_calc_one(SEXP muSEXP, SEXP sigSEXP, SEXP deltaSEXP, SEXP indLSEXP, SEXP nItSEXP, SEXP itPerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const double >::type nIt(nItSEXP);
    Rcpp::traits::input_parameter< const double >::type itPer(itPerSEXP);
    rcpp_result_gen = Rcpp::wrap(mcp_calc_one(mu, sig, delta, indL, nIt, itPer));
    return rcpp_result_gen;
END_RCPP
}
// prodExPDF
long double prodExPDF(long double x, long double mu1_in, long double mu2_in, long double mu3_in, long double sig1_in, long double sig2_in, long double sig3_in, long double sig12_in, long double sig13_in, long double sig23_in, double indL, int UPPERLIM, long double maxRet);
RcppExport SEXP _mmed_prodExPDF(SEXP xSEXP, SEXP mu1_inSEXP, SEXP mu2_inSEXP, SEXP mu3_inSEXP, SEXP sig1_inSEXP, SEXP sig2_inSEXP, SEXP sig3_inSEXP, SEXP sig12_inSEXP, SEXP sig13_inSEXP, SEXP sig23_inSEXP, SEXP indLSEXP, SEXP UPPERLIMSEXP, SEXP maxRetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type x(xSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1_in(mu1_inSEXP);
    Rcpp::traits::input_parameter< long double >::type mu2_in(mu2_inSEXP);
    Rcpp::traits::input_parameter< long double >::type mu3_in(mu3_inSEXP);
    Rcpp::traits::input_parameter< long double >::type sig1_in(sig1_inSEXP);
    Rcpp::traits::input_parameter< long double >::type sig2_in(sig2_inSEXP);
    Rcpp::traits::input_parameter< long double >::type sig3_in(sig3_inSEXP);
    Rcpp::traits::input_parameter< long double >::type sig12_in(sig12_inSEXP);
    Rcpp::traits::input_parameter< long double >::type sig13_in(sig13_inSEXP);
    Rcpp::traits::input_parameter< long double >::type sig23_in(sig23_inSEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< int >::type UPPERLIM(UPPERLIMSEXP);
    Rcpp::traits::input_parameter< long double >::type maxRet(maxRetSEXP);
    rcpp_result_gen = Rcpp::wrap(prodExPDF(x, mu1_in, mu2_in, mu3_in, sig1_in, sig2_in, sig3_in, sig12_in, sig13_in, sig23_in, indL, UPPERLIM, maxRet));
    return rcpp_result_gen;
END_RCPP
}
// exFindLower
double exFindLower(long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, double indL, double pdfTol);
RcppExport SEXP _mmed_exFindLower(SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP indLSEXP, SEXP pdfTolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< double >::type pdfTol(pdfTolSEXP);
    rcpp_result_gen = Rcpp::wrap(exFindLower(mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, indL, pdfTol));
    return rcpp_result_gen;
END_RCPP
}
// exFindUpper
double exFindUpper(long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, double indL, double pdfTol);
RcppExport SEXP _mmed_exFindUpper(SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP indLSEXP, SEXP pdfTolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< double >::type pdfTol(pdfTolSEXP);
    rcpp_result_gen = Rcpp::wrap(exFindUpper(mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, indL, pdfTol));
    return rcpp_result_gen;
END_RCPP
}
// exProdCDF
long double exProdCDF(long double x, long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, long double maxRet, double indL);
RcppExport SEXP _mmed_exProdCDF(SEXP xSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP maxRetSEXP, SEXP indLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type x(xSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< long double >::type maxRet(maxRetSEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    rcpp_result_gen = Rcpp::wrap(exProdCDF(x, mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, maxRet, indL));
    return rcpp_result_gen;
END_RCPP
}
// exProdCI
arma::vec exProdCI(long double alpha, long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, long double maxRet, double indL, long double citol);
RcppExport SEXP _mmed_exProdCI(SEXP alphaSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP maxRetSEXP, SEXP indLSEXP, SEXP citolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< long double >::type maxRet(maxRetSEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< long double >::type citol(citolSEXP);
    rcpp_result_gen = Rcpp::wrap(exProdCI(alpha, mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, maxRet, indL, citol));
    return rcpp_result_gen;
END_RCPP
}
// mySign
double mySign(double x);
RcppExport SEXP _mmed_mySign(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mySign(x));
    return rcpp_result_gen;
END_RCPP
}
// prodPDF_c
double prodPDF_c(double x, long double z, long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, double indL);
RcppExport SEXP _mmed_prodPDF_c(SEXP xSEXP, SEXP zSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP indLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< long double >::type z(zSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    rcpp_result_gen = Rcpp::wrap(prodPDF_c(x, z, mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, indL));
    return rcpp_result_gen;
END_RCPP
}
// findLower
double findLower(long double z, long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, double indL);
RcppExport SEXP _mmed_findLower(SEXP zSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP indLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type z(zSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    rcpp_result_gen = Rcpp::wrap(findLower(z, mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, indL));
    return rcpp_result_gen;
END_RCPP
}
// findUpper
double findUpper(long double z, long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, double indL);
RcppExport SEXP _mmed_findUpper(SEXP zSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP indLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type z(zSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    rcpp_result_gen = Rcpp::wrap(findUpper(z, mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, indL));
    return rcpp_result_gen;
END_RCPP
}
// prodCDF
double prodCDF(long double z, long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, double indL);
RcppExport SEXP _mmed_prodCDF(SEXP zSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP indLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type z(zSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    rcpp_result_gen = Rcpp::wrap(prodCDF(z, mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, indL));
    return rcpp_result_gen;
END_RCPP
}
// prodCI
arma::vec prodCI(long double alpha, long double mu1, long double mu2, long double mu3, long double sig1, long double sig2, long double sig3, long double sig12, long double sig13, long double sig23, long double maxRet, double indL, long double citol);
RcppExport SEXP _mmed_prodCI(SEXP alphaSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP mu3SEXP, SEXP sig1SEXP, SEXP sig2SEXP, SEXP sig3SEXP, SEXP sig12SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP maxRetSEXP, SEXP indLSEXP, SEXP citolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< long double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< long double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< long double >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< long double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< long double >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< long double >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< long double >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< long double >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< long double >::type maxRet(maxRetSEXP);
    Rcpp::traits::input_parameter< double >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< long double >::type citol(citolSEXP);
    rcpp_result_gen = Rcpp::wrap(prodCI(alpha, mu1, mu2, mu3, sig1, sig2, sig3, sig12, sig13, sig23, maxRet, indL, citol));
    return rcpp_result_gen;
END_RCPP
}
// calc_a1_val_twoseq
double calc_a1_val_twoseq(const double& gamma_tilde, const double& psi_tilde, const double& h1, const double& h2, const double& sig2, const double& gamma_1, const double psi_1, const double& tau2_2, const double tau2_1, const double& S2, const double& G);
RcppExport SEXP _mmed_calc_a1_val_twoseq(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP tau2_2SEXP, SEXP tau2_1SEXP, SEXP S2SEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type S2(S2SEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_a1_val_twoseq(gamma_tilde, psi_tilde, h1, h2, sig2, gamma_1, psi_1, tau2_2, tau2_1, S2, G));
    return rcpp_result_gen;
END_RCPP
}
// calc_b1_val_twoseq
double calc_b1_val_twoseq(const double& gamma_1, const double& psi_1, const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const double& y, const arma::rowvec& Z, const double& G, const arma::rowvec& X1, const arma::rowvec& X2, const double& S2);
RcppExport SEXP _mmed_calc_b1_val_twoseq(SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ySEXP, SEXP ZSEXP, SEXP GSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP S2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double& >::type S2(S2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_b1_val_twoseq(gamma_1, psi_1, gamma_tilde, psi_tilde, gamma_2, psi_2, h1, h2, sig2, tau2_1, tau2_2, beta, ksi_1, ksi_2, y, Z, G, X1, X2, S2));
    return rcpp_result_gen;
END_RCPP
}
// calc_a2_val_twoseq
double calc_a2_val_twoseq(const double& gamma_2, const double& psi_2, const double& h1, const double& h2, const double& S1, const double& G, const double& sig2, const double& tau2_2);
RcppExport SEXP _mmed_calc_a2_val_twoseq(SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP S1SEXP, SEXP GSEXP, SEXP sig2SEXP, SEXP tau2_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_a2_val_twoseq(gamma_2, psi_2, h1, h2, S1, G, sig2, tau2_2));
    return rcpp_result_gen;
END_RCPP
}
// calc_b2_val_twoseq
double calc_b2_val_twoseq(const double& gamma_2, const double& psi_2, const double& h1, const double& h2, const double& gamma_tilde, const double& psi_tilde, const arma::vec& beta, const double& gamma_1, const double& psi_1, const arma::vec& ksi_2, const double& sig2, const double& tau2_2, const double& y, const double& G, const arma::rowvec& Z, const arma::rowvec& X2, const double& S1);
RcppExport SEXP _mmed_calc_b2_val_twoseq(SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP betaSEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP ksi_2SEXP, SEXP sig2SEXP, SEXP tau2_2SEXP, SEXP ySEXP, SEXP GSEXP, SEXP ZSEXP, SEXP X2SEXP, SEXP S1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double& >::type S1(S1SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_b2_val_twoseq(gamma_2, psi_2, h1, h2, gamma_tilde, psi_tilde, beta, gamma_1, psi_1, ksi_2, sig2, tau2_2, y, G, Z, X2, S1));
    return rcpp_result_gen;
END_RCPP
}
// calc_c1_val_twoseq
double calc_c1_val_twoseq(const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& gamma_tilde, const double& psi_tilde, const double& tau2_1, const double& tau2_2, const double& sig2, const double& G);
RcppExport SEXP _mmed_calc_c1_val_twoseq(SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP sig2SEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_c1_val_twoseq(gamma_1, psi_1, gamma_2, psi_2, gamma_tilde, psi_tilde, tau2_1, tau2_2, sig2, G));
    return rcpp_result_gen;
END_RCPP
}
// calc_d1_val_twoseq
double calc_d1_val_twoseq(const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& gamma_tilde, const double& psi_tilde, const double& rho, const double& tau2_1, const double& tau2_2, const double& sig2, const double& y, const double& G, const arma::rowvec& Z, const arma::rowvec& X1, const arma::rowvec& X2, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const double& c1, const double c2);
RcppExport SEXP _mmed_calc_d1_val_twoseq(SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP rhoSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP GSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP c1SEXP, SEXP c2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const double >::type c2(c2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_d1_val_twoseq(gamma_1, psi_1, gamma_2, psi_2, gamma_tilde, psi_tilde, rho, tau2_1, tau2_2, sig2, y, G, Z, X1, X2, beta, ksi_1, ksi_2, c1, c2));
    return rcpp_result_gen;
END_RCPP
}
// calc_c2_val_twoseq
double calc_c2_val_twoseq(const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& gamma_tilde, const double& psi_tilde, const double& tau2_1, const double& tau2_2, const double& sig2, const double& G);
RcppExport SEXP _mmed_calc_c2_val_twoseq(SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP sig2SEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_c2_val_twoseq(gamma_1, psi_1, gamma_2, psi_2, gamma_tilde, psi_tilde, tau2_1, tau2_2, sig2, G));
    return rcpp_result_gen;
END_RCPP
}
// calc_d2_val_twoseq
double calc_d2_val_twoseq(const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& gamma_tilde, const double& psi_tilde, const double& rho, const double& tau2_1, const double& tau2_2, const double& sig2, const double& y, const double& G, const arma::rowvec& Z, const arma::rowvec& X1, const arma::rowvec& X2, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const double& c1, const double c2);
RcppExport SEXP _mmed_calc_d2_val_twoseq(SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP rhoSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP sig2SEXP, SEXP ySEXP, SEXP GSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP c1SEXP, SEXP c2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const double >::type c2(c2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_d2_val_twoseq(gamma_1, psi_1, gamma_2, psi_2, gamma_tilde, psi_tilde, rho, tau2_1, tau2_2, sig2, y, G, Z, X1, X2, beta, ksi_1, ksi_2, c1, c2));
    return rcpp_result_gen;
END_RCPP
}
// calc_corr_b_twoseq
double calc_corr_b_twoseq(const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& gamma_tilde, const double& psi_tilde, const double& tau2_2, const double& sig2, const double& G, const double& c1, const double& c2);
RcppExport SEXP _mmed_calc_corr_b_twoseq(SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP tau2_2SEXP, SEXP sig2SEXP, SEXP GSEXP, SEXP c1SEXP, SEXP c2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const double& >::type c2(c2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_corr_b_twoseq(gamma_1, psi_1, gamma_2, psi_2, gamma_tilde, psi_tilde, tau2_2, sig2, G, c1, c2));
    return rcpp_result_gen;
END_RCPP
}
// calc_corr_rho_twoseq
double calc_corr_rho_twoseq(const double& b);
RcppExport SEXP _mmed_calc_corr_rho_twoseq(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_corr_rho_twoseq(b));
    return rcpp_result_gen;
END_RCPP
}
// bothMissInt_ord
double bothMissInt_ord(const double& Y, arma::vec beta, arma::rowvec Z, const double& G, const double& sig2, const double& gamma_1, const double& psi_1, const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, arma::vec ksi_1, arma::vec ksi_2, arma::rowvec X1, arma::rowvec X2, const double& tau2_1, const double& tau2_2, const int& ps1, const int& ps2, const double& lowS1, const double& lowS2, const double& highS1, const double& highS2, const int& nDivisions);
RcppExport SEXP _mmed_bothMissInt_ord(SEXP YSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP sig2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP ps1SEXP, SEXP ps2SEXP, SEXP lowS1SEXP, SEXP lowS2SEXP, SEXP highS1SEXP, SEXP highS2SEXP, SEXP nDivisionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const int& >::type ps1(ps1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ps2(ps2SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS1(lowS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS2(lowS2SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS1(highS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS2(highS2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    rcpp_result_gen = Rcpp::wrap(bothMissInt_ord(Y, beta, Z, G, sig2, gamma_1, psi_1, gamma_tilde, psi_tilde, gamma_2, psi_2, h1, h2, ksi_1, ksi_2, X1, X2, tau2_1, tau2_2, ps1, ps2, lowS1, lowS2, highS1, highS2, nDivisions));
    return rcpp_result_gen;
END_RCPP
}
// bothMissInt_ord_limits
arma::mat bothMissInt_ord_limits(const double& Y, arma::vec beta, arma::rowvec Z, const double& G, const double& sig2, const double& gamma_1, const double& psi_1, const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, arma::vec ksi_1, arma::vec ksi_2, arma::rowvec X1, arma::rowvec X2, const double& tau2_1, const double& tau2_2, const double& lowS1, const double& lowS2, const double& highS1, const double& highS2, const int missKey1, const int missKey2, const double limit, const double stepCorrect);
RcppExport SEXP _mmed_bothMissInt_ord_limits(SEXP YSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP sig2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP lowS1SEXP, SEXP lowS2SEXP, SEXP highS1SEXP, SEXP highS2SEXP, SEXP missKey1SEXP, SEXP missKey2SEXP, SEXP limitSEXP, SEXP stepCorrectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS1(lowS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS2(lowS2SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS1(highS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS2(highS2SEXP);
    Rcpp::traits::input_parameter< const int >::type missKey1(missKey1SEXP);
    Rcpp::traits::input_parameter< const int >::type missKey2(missKey2SEXP);
    Rcpp::traits::input_parameter< const double >::type limit(limitSEXP);
    Rcpp::traits::input_parameter< const double >::type stepCorrect(stepCorrectSEXP);
    rcpp_result_gen = Rcpp::wrap(bothMissInt_ord_limits(Y, beta, Z, G, sig2, gamma_1, psi_1, gamma_tilde, psi_tilde, gamma_2, psi_2, h1, h2, ksi_1, ksi_2, X1, X2, tau2_1, tau2_2, lowS1, lowS2, highS1, highS2, missKey1, missKey2, limit, stepCorrect));
    return rcpp_result_gen;
END_RCPP
}
// calc_expectation_twoseq
List calc_expectation_twoseq(const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& gamma_tilde, const double& psi_tilde, const double& h1, const double& h2, const double sig2, const double tau2_1, const double tau2_2, const arma::vec& Y, const arma::mat& Z, const arma::mat& X1, const arma::mat& X2, const arma::vec& G, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, arma::vec S1, arma::vec R1, arma::vec S2, arma::vec R2, const arma::vec& LLD1, const arma::vec& ULD1, const arma::vec& LLD2, const arma::vec& ULD2, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_expectation_twoseq(SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP S1SEXP, SEXP R1SEXP, SEXP S2SEXP, SEXP R2SEXP, SEXP LLD1SEXP, SEXP ULD1SEXP, SEXP LLD2SEXP, SEXP ULD2SEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S2(S2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LLD1(LLD1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ULD1(ULD1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LLD2(LLD2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ULD2(ULD2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_expectation_twoseq(gamma_1, psi_1, gamma_2, psi_2, gamma_tilde, psi_tilde, h1, h2, sig2, tau2_1, tau2_2, Y, Z, X1, X2, G, beta, ksi_1, ksi_2, S1, R1, S2, R2, LLD1, ULD1, LLD2, ULD2, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_beta_tilde_gamma2_twoseq
arma::vec calc_beta_tilde_gamma2_twoseq(const arma::vec& Y, const arma::mat& Z, const arma::vec& G, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES2_2, const arma::vec& ES1ES2, const arma::vec& ES12ES2, const arma::vec& ES1ES22, const arma::vec& ES12ES22, const bool& int_gs1_Y, const bool& int_gs2, const bool& int_s1s2, const bool& int_gs1s2);
RcppExport SEXP _mmed_calc_beta_tilde_gamma2_twoseq(SEXP YSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES2_2SEXP, SEXP ES1ES2SEXP, SEXP ES12ES2SEXP, SEXP ES1ES22SEXP, SEXP ES12ES22SEXP, SEXP int_gs1_YSEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2_2(ES2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES2(ES1ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES2(ES12ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES22(ES1ES22SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES22(ES12ES22SEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_gs1_Y(int_gs1_YSEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_gs1s2(int_gs1s2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_beta_tilde_gamma2_twoseq(Y, Z, G, ES1, ES1_2, ES2, ES2_2, ES1ES2, ES12ES2, ES1ES22, ES12ES22, int_gs1_Y, int_gs2, int_s1s2, int_gs1s2));
    return rcpp_result_gen;
END_RCPP
}
// calc_sig2_twoseq
double calc_sig2_twoseq(const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double psi_2, const double& h1, const double& h2, const bool& int_gs1_Y, const bool& int_gs2, const bool& int_s1s2, const bool& int_gs1s2, const arma::vec& Y, const arma::vec& beta, const arma::vec& G, const arma::mat& Z, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES2_2, const arma::vec& ES1ES2, const arma::vec& ES12ES2, const arma::vec& ES1ES22, const arma::vec& ES12ES22);
RcppExport SEXP _mmed_calc_sig2_twoseq(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP int_gs1_YSEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP YSEXP, SEXP betaSEXP, SEXP GSEXP, SEXP ZSEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES2_2SEXP, SEXP ES1ES2SEXP, SEXP ES12ES2SEXP, SEXP ES1ES22SEXP, SEXP ES12ES22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_gs1_Y(int_gs1_YSEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2_2(ES2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES2(ES1ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES2(ES12ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES22(ES1ES22SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES22(ES12ES22SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_sig2_twoseq(gamma_tilde, psi_tilde, gamma_2, psi_2, h1, h2, int_gs1_Y, int_gs2, int_s1s2, int_gs1s2, Y, beta, G, Z, ES1, ES1_2, ES2, ES2_2, ES1ES2, ES12ES2, ES1ES22, ES12ES22));
    return rcpp_result_gen;
END_RCPP
}
// calc_ksi2_gamma1_twoseq
arma::vec calc_ksi2_gamma1_twoseq(const arma::mat& X2, const arma::vec& G, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES1ES2, const arma::vec& ES12ES2, const bool& gs1);
RcppExport SEXP _mmed_calc_ksi2_gamma1_twoseq(SEXP X2SEXP, SEXP GSEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES1ES2SEXP, SEXP ES12ES2SEXP, SEXP gs1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES2(ES1ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES2(ES12ES2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type gs1(gs1SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ksi2_gamma1_twoseq(X2, G, ES1, ES1_2, ES2, ES1ES2, ES12ES2, gs1));
    return rcpp_result_gen;
END_RCPP
}
// calc_ksi1_twoseq
arma::vec calc_ksi1_twoseq(const arma::mat& X1, const arma::vec& ES1);
RcppExport SEXP _mmed_calc_ksi1_twoseq(SEXP X1SEXP, SEXP ES1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ksi1_twoseq(X1, ES1));
    return rcpp_result_gen;
END_RCPP
}
// calc_tau2_twoseq
double calc_tau2_twoseq(const arma::vec& ksi_2, const arma::mat& X2, const arma::vec& G, const double& gamma_1, const double psi_1, const bool& int_gs1, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES2_2, const arma::vec& ES1ES2);
RcppExport SEXP _mmed_calc_tau2_twoseq(SEXP ksi_2SEXP, SEXP X2SEXP, SEXP GSEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP int_gs1SEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES2_2SEXP, SEXP ES1ES2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const bool& >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2_2(ES2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES2(ES1ES2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_tau2_twoseq(ksi_2, X2, G, gamma_1, psi_1, int_gs1, ES1, ES1_2, ES2, ES2_2, ES1ES2));
    return rcpp_result_gen;
END_RCPP
}
// calc_tau1_twoseq
double calc_tau1_twoseq(const arma::vec& ksi_1, const arma::mat& X1, const arma::vec& ES1, const arma::vec& ES1_2);
RcppExport SEXP _mmed_calc_tau1_twoseq(SEXP ksi_1SEXP, SEXP X1SEXP, SEXP ES1SEXP, SEXP ES1_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_tau1_twoseq(ksi_1, X1, ES1, ES1_2));
    return rcpp_result_gen;
END_RCPP
}
// twoSeqMed_EM
List twoSeqMed_EM(const arma::vec& Y, const arma::vec& G, const arma::vec& S1, const arma::vec& R1, const arma::vec& S2, const arma::vec& R2, const arma::mat& Z, const arma::mat& X1, const arma::mat& X2, const arma::vec& lowerS1, const arma::vec& upperS1, const arma::vec& lowerS2, const arma::vec& upperS2, bool int_gs1, bool int_gs1_Y, bool int_gs2, bool int_s1s2, bool int_gs1s2, const double convLimit, const double iterationLimit, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_twoSeqMed_EM(SEXP YSEXP, SEXP GSEXP, SEXP S1SEXP, SEXP R1SEXP, SEXP S2SEXP, SEXP R2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP lowerS1SEXP, SEXP upperS1SEXP, SEXP lowerS2SEXP, SEXP upperS2SEXP, SEXP int_gs1SEXP, SEXP int_gs1_YSEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP convLimitSEXP, SEXP iterationLimitSEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S2(S2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS1(lowerS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS1(upperS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS2(lowerS2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS2(upperS2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1_Y(int_gs1_YSEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const double >::type convLimit(convLimitSEXP);
    Rcpp::traits::input_parameter< const double >::type iterationLimit(iterationLimitSEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(twoSeqMed_EM(Y, G, S1, R1, S2, R2, Z, X1, X2, lowerS1, upperS1, lowerS2, upperS2, int_gs1, int_gs1_Y, int_gs2, int_s1s2, int_gs1s2, convLimit, iterationLimit, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_Q_matrix_twoseq
arma::mat calc_Q_matrix_twoseq(const double& sig2, const double& tau2_1, const double& tau2_2, const arma::mat& Z, const arma::mat& X1, const arma::mat& X2, const arma::vec& G, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES2_2, const arma::vec& ES1S2, const arma::vec& ES12S2, const arma::vec& ES1S22, const arma::vec& ES12S22, bool int_gs1, bool int_gs1_Y, bool int_gs2, bool int_s1s2, bool int_gs1s2);
RcppExport SEXP _mmed_calc_Q_matrix_twoseq(SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP GSEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES2_2SEXP, SEXP ES1S2SEXP, SEXP ES12S2SEXP, SEXP ES1S22SEXP, SEXP ES12S22SEXP, SEXP int_gs1SEXP, SEXP int_gs1_YSEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2_2(ES2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1S2(ES1S2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12S2(ES12S2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1S22(ES1S22SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12S22(ES12S22SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1_Y(int_gs1_YSEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Q_matrix_twoseq(sig2, tau2_1, tau2_2, Z, X1, X2, G, ES1, ES1_2, ES2, ES2_2, ES1S2, ES12S2, ES1S22, ES12S22, int_gs1, int_gs1_Y, int_gs2, int_s1s2, int_gs1s2));
    return rcpp_result_gen;
END_RCPP
}
// calc_V_mat_twoseq_S1
arma::mat calc_V_mat_twoseq_S1(const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& gamma_1, const double& psi_1, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& Y, const double& G, const double& S_obs, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X1, const arma::rowvec& X2);
RcppExport SEXP _mmed_calc_V_mat_twoseq_S1(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP S_obsSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_V_mat_twoseq_S1(gamma_tilde, psi_tilde, gamma_2, psi_2, gamma_1, psi_1, h1, h2, sig2, tau2_1, tau2_2, Y, G, S_obs, beta, ksi_1, ksi_2, Z, X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// calc_V_mat_twoseq_S2
arma::mat calc_V_mat_twoseq_S2(const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& gamma_1, const double& psi_1, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& Y, const double& G, const double& S_obs, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X1, const arma::rowvec& X2);
RcppExport SEXP _mmed_calc_V_mat_twoseq_S2(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP S_obsSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_V_mat_twoseq_S2(gamma_tilde, psi_tilde, gamma_2, psi_2, gamma_1, psi_1, h1, h2, sig2, tau2_1, tau2_2, Y, G, S_obs, beta, ksi_1, ksi_2, Z, X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// calc_V_mat_twoseq_S1S2
arma::mat calc_V_mat_twoseq_S1S2(const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& gamma_1, const double& psi_1, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& Y, const double& G, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X1, const arma::rowvec& X2);
RcppExport SEXP _mmed_calc_V_mat_twoseq_S1S2(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_V_mat_twoseq_S1S2(gamma_tilde, psi_tilde, gamma_2, psi_2, gamma_1, psi_1, h1, h2, sig2, tau2_1, tau2_2, Y, G, beta, ksi_1, ksi_2, Z, X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// calc_U_mat_twoseq_S1miss
arma::mat calc_U_mat_twoseq_S1miss(const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& gamma_1, const double& psi_1, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& Y, const double& G, const double& S_obs, const double& R, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X1, const arma::rowvec& X2, const double& LLD, const double& ULD, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_U_mat_twoseq_S1miss(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP S_obsSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP LLDSEXP, SEXP ULDSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD(LLDSEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD(ULDSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_U_mat_twoseq_S1miss(gamma_tilde, psi_tilde, gamma_2, psi_2, gamma_1, psi_1, h1, h2, sig2, tau2_1, tau2_2, Y, G, S_obs, R, beta, ksi_1, ksi_2, Z, X1, X2, LLD, ULD, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_U_mat_twoseq_S2miss
arma::mat calc_U_mat_twoseq_S2miss(const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& gamma_1, const double& psi_1, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& Y, const double& G, const double& S_obs, const double& R, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X2, const double& LLD, const double& ULD, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_U_mat_twoseq_S2miss(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP S_obsSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP X2SEXP, SEXP LLDSEXP, SEXP ULDSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD(LLDSEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD(ULDSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_U_mat_twoseq_S2miss(gamma_tilde, psi_tilde, gamma_2, psi_2, gamma_1, psi_1, h1, h2, sig2, tau2_1, tau2_2, Y, G, S_obs, R, beta, ksi_1, ksi_2, Z, X2, LLD, ULD, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_U_mat_twoseq_twomiss
arma::mat calc_U_mat_twoseq_twomiss(const double& gamma_tilde, const double& psi_tilde, const double& gamma_2, const double& psi_2, const double& gamma_1, const double& psi_1, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& Y, const double& G, const double& R1, const double& R2, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X1, const arma::rowvec& X2, const double& LLD1, const double& ULD1, const double& LLD2, const double& ULD2, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_U_mat_twoseq_twomiss(SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP R1SEXP, SEXP R2SEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP LLD1SEXP, SEXP ULD1SEXP, SEXP LLD2SEXP, SEXP ULD2SEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< const double& >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD1(LLD1SEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD1(ULD1SEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD2(LLD2SEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD2(ULD2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_U_mat_twoseq_twomiss(gamma_tilde, psi_tilde, gamma_2, psi_2, gamma_1, psi_1, h1, h2, sig2, tau2_1, tau2_2, Y, G, R1, R2, beta, ksi_1, ksi_2, Z, X1, X2, LLD1, ULD1, LLD2, ULD2, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_OMEGA_twoseq
arma::mat calc_OMEGA_twoseq(const arma::vec& Y, const arma::vec& G, const arma::vec& S1, const arma::vec& R1, const arma::vec& S2, const arma::vec& R2, const arma::mat& Z, const arma::mat& X1, const arma::mat& X2, const arma::vec& lowerS1, const arma::vec& upperS1, const arma::vec& lowerS2, const arma::vec& upperS2, const arma::vec& beta, const double& gamma_tilde, const double& psi_tilde, const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const arma::vec& ksi_1, const arma::vec& ksi_2, bool int_gs1, bool int_gs1_Y, bool int_gs2, bool int_s1s2, bool int_gs1s2, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_OMEGA_twoseq(SEXP YSEXP, SEXP GSEXP, SEXP S1SEXP, SEXP R1SEXP, SEXP S2SEXP, SEXP R2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP lowerS1SEXP, SEXP upperS1SEXP, SEXP lowerS2SEXP, SEXP upperS2SEXP, SEXP betaSEXP, SEXP gamma_tildeSEXP, SEXP psi_tildeSEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP int_gs1SEXP, SEXP int_gs1_YSEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S2(S2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS1(lowerS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS1(upperS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS2(lowerS2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS2(upperS2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_tilde(gamma_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_tilde(psi_tildeSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1_Y(int_gs1_YSEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_OMEGA_twoseq(Y, G, S1, R1, S2, R2, Z, X1, X2, lowerS1, upperS1, lowerS2, upperS2, beta, gamma_tilde, psi_tilde, gamma_1, psi_1, gamma_2, psi_2, h1, h2, sig2, tau2_1, tau2_2, ksi_1, ksi_2, int_gs1, int_gs1_Y, int_gs2, int_s1s2, int_gs1s2, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// deltaCI_twoseq
List deltaCI_twoseq(const long double& mu1, const long double& sig1, const long double& mu2, const long double& sig2, const long double& mu2b, const long double& sig2b, const long double& mu3, const long double& sig3, const long double& mu3b, const long double& sig3b, const long double& sig12, const long double& sig12b, const long double& sig13, const long double& sig13b, const long double& sig22b, const long double& sig23, const long double& sig23b, const long double& sig2b3, const long double& sig2b3b, const long double& sig33b, const int& indL, const double alpha);
RcppExport SEXP _mmed_deltaCI_twoseq(SEXP mu1SEXP, SEXP sig1SEXP, SEXP mu2SEXP, SEXP sig2SEXP, SEXP mu2bSEXP, SEXP sig2bSEXP, SEXP mu3SEXP, SEXP sig3SEXP, SEXP mu3bSEXP, SEXP sig3bSEXP, SEXP sig12SEXP, SEXP sig12bSEXP, SEXP sig13SEXP, SEXP sig13bSEXP, SEXP sig22bSEXP, SEXP sig23SEXP, SEXP sig23bSEXP, SEXP sig2b3SEXP, SEXP sig2b3bSEXP, SEXP sig33bSEXP, SEXP indLSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long double& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu2b(mu2bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig2b(sig2bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu3b(mu3bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig3b(sig3bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig12b(sig12bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig13b(sig13bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig22b(sig22bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig23b(sig23bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig2b3(sig2b3SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig2b3b(sig2b3bSEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig33b(sig33bSEXP);
    Rcpp::traits::input_parameter< const int& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(deltaCI_twoseq(mu1, sig1, mu2, sig2, mu2b, sig2b, mu3, sig3, mu3b, sig3b, sig12, sig12b, sig13, sig13b, sig22b, sig23, sig23b, sig2b3, sig2b3b, sig33b, indL, alpha));
    return rcpp_result_gen;
END_RCPP
}
// bootstrapCI_twoseq
List bootstrapCI_twoseq(const arma::vec& y, const arma::vec& g, const arma::vec& s1, const arma::vec& r1, const arma::vec& s2, const arma::vec& r2, const arma::mat& Z, const arma::mat& X1, const arma::mat& X2, const arma::vec& lowerS1, const arma::vec& upperS1, const arma::vec& lowerS2, const arma::vec& upperS2, const double& delta, const double& alpha, bool int_gs1, bool int_gs1_Y, bool int_gs2, bool int_s1s2, bool int_gs1s2, const double& indL, const unsigned int bootStrapN, const double convLimit, const double iterationLimit, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_bootstrapCI_twoseq(SEXP ySEXP, SEXP gSEXP, SEXP s1SEXP, SEXP r1SEXP, SEXP s2SEXP, SEXP r2SEXP, SEXP ZSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP lowerS1SEXP, SEXP upperS1SEXP, SEXP lowerS2SEXP, SEXP upperS2SEXP, SEXP deltaSEXP, SEXP alphaSEXP, SEXP int_gs1SEXP, SEXP int_gs1_YSEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP indLSEXP, SEXP bootStrapNSEXP, SEXP convLimitSEXP, SEXP iterationLimitSEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS1(lowerS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS1(upperS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS2(lowerS2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS2(upperS2SEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1_Y(int_gs1_YSEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type bootStrapN(bootStrapNSEXP);
    Rcpp::traits::input_parameter< const double >::type convLimit(convLimitSEXP);
    Rcpp::traits::input_parameter< const double >::type iterationLimit(iterationLimitSEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapCI_twoseq(y, g, s1, r1, s2, r2, Z, X1, X2, lowerS1, upperS1, lowerS2, upperS2, delta, alpha, int_gs1, int_gs1_Y, int_gs2, int_s1s2, int_gs1s2, indL, bootStrapN, convLimit, iterationLimit, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// mcCI_twoseq
List mcCI_twoseq(const arma::vec& mu, const arma::mat& sig, const double& delta, const double& indL, const double nIt, const double alpha);
RcppExport SEXP _mmed_mcCI_twoseq(SEXP muSEXP, SEXP sigSEXP, SEXP deltaSEXP, SEXP indLSEXP, SEXP nItSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const double >::type nIt(nItSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcCI_twoseq(mu, sig, delta, indL, nIt, alpha));
    return rcpp_result_gen;
END_RCPP
}
// calc_a_val_twosim
double calc_a_val_twosim(const double& gamma, const double& psi, const double& G, const double& S_obs, const double& h1, const double& h2, const double& sig2, const double& tau2, const double& rho);
RcppExport SEXP _mmed_calc_a_val_twosim(SEXP gammaSEXP, SEXP psiSEXP, SEXP GSEXP, SEXP S_obsSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_a_val_twosim(gamma, psi, G, S_obs, h1, h2, sig2, tau2, rho));
    return rcpp_result_gen;
END_RCPP
}
// calc_b_val_twosim
double calc_b_val_twosim(const double& gamma_same, const double& gamma_diff, const double& psi_same, const double& psi_diff, const double& h1, const double& h2, const double& rho, const double& tau2_same, const double& tau2_diff, const double& sig2, const double& Y, const double& G, const arma::rowvec& Z, const arma::vec& beta, const double& S_obs, const arma::rowvec& X, const arma::vec& ksi_same, const arma::vec& ksi_diff);
RcppExport SEXP _mmed_calc_b_val_twosim(SEXP gamma_sameSEXP, SEXP gamma_diffSEXP, SEXP psi_sameSEXP, SEXP psi_diffSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP rhoSEXP, SEXP tau2_sameSEXP, SEXP tau2_diffSEXP, SEXP sig2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP ZSEXP, SEXP betaSEXP, SEXP S_obsSEXP, SEXP XSEXP, SEXP ksi_sameSEXP, SEXP ksi_diffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_same(gamma_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_diff(gamma_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_same(psi_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_diff(psi_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_same(tau2_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_diff(tau2_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_same(ksi_sameSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_diff(ksi_diffSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_b_val_twosim(gamma_same, gamma_diff, psi_same, psi_diff, h1, h2, rho, tau2_same, tau2_diff, sig2, Y, G, Z, beta, S_obs, X, ksi_same, ksi_diff));
    return rcpp_result_gen;
END_RCPP
}
// calc_c_val_twosim
double calc_c_val_twosim(const double& gamma_same, const double& gamma_diff, const double& psi_same, const double& psi_diff, const double& G, const double& tau2_same, const double& tau2_diff, const double& sig2, const double& rho);
RcppExport SEXP _mmed_calc_c_val_twosim(SEXP gamma_sameSEXP, SEXP gamma_diffSEXP, SEXP psi_sameSEXP, SEXP psi_diffSEXP, SEXP GSEXP, SEXP tau2_sameSEXP, SEXP tau2_diffSEXP, SEXP sig2SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_same(gamma_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_diff(gamma_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_same(psi_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_diff(psi_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_same(tau2_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_diff(tau2_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_c_val_twosim(gamma_same, gamma_diff, psi_same, psi_diff, G, tau2_same, tau2_diff, sig2, rho));
    return rcpp_result_gen;
END_RCPP
}
// calc_d_val_twosim
double calc_d_val_twosim(const double& gamma_same, const double& gamma_diff, const double& psi_same, const double& psi_diff, const double& rho, const double& r, const double& tau2_same, const double& tau2_diff, const double& sig2, const double& Y, const double& G, const arma::rowvec& Z, const arma::rowvec& X, const arma::vec& beta, const arma::vec& ksi_same, const arma::vec& ksi_diff, const double& c_same, const double c_diff);
RcppExport SEXP _mmed_calc_d_val_twosim(SEXP gamma_sameSEXP, SEXP gamma_diffSEXP, SEXP psi_sameSEXP, SEXP psi_diffSEXP, SEXP rhoSEXP, SEXP rSEXP, SEXP tau2_sameSEXP, SEXP tau2_diffSEXP, SEXP sig2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP ksi_sameSEXP, SEXP ksi_diffSEXP, SEXP c_sameSEXP, SEXP c_diffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_same(gamma_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_diff(gamma_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_same(psi_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_diff(psi_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_same(tau2_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_diff(tau2_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_same(ksi_sameSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_diff(ksi_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type c_same(c_sameSEXP);
    Rcpp::traits::input_parameter< const double >::type c_diff(c_diffSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_d_val_twosim(gamma_same, gamma_diff, psi_same, psi_diff, rho, r, tau2_same, tau2_diff, sig2, Y, G, Z, X, beta, ksi_same, ksi_diff, c_same, c_diff));
    return rcpp_result_gen;
END_RCPP
}
// calc_corr_b_twosim
double calc_corr_b_twosim(const double& gamma_1, const double& gamma_2, const double& psi_1, const double& psi_2, const double& G, const double& tau2_1, const double& tau2_2, const double& c1, const double& c2, const double& sig2, const double& rho);
RcppExport SEXP _mmed_calc_corr_b_twosim(SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP GSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP c1SEXP, SEXP c2SEXP, SEXP sig2SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const double& >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_corr_b_twosim(gamma_1, gamma_2, psi_1, psi_2, G, tau2_1, tau2_2, c1, c2, sig2, rho));
    return rcpp_result_gen;
END_RCPP
}
// calc_corr_r_twosim
double calc_corr_r_twosim(const double& b);
RcppExport SEXP _mmed_calc_corr_r_twosim(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_corr_r_twosim(b));
    return rcpp_result_gen;
END_RCPP
}
// bothMissInt_unord
double bothMissInt_unord(const double& Y, arma::vec beta, arma::rowvec Z, const double& G, const double& sig2, const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, arma::vec ksi_1, arma::vec ksi_2, arma::rowvec X, const double& tau2_1, const double& tau2_2, const double& rho, const int& ps1, const int& ps2, const double& lowS1, const double& lowS2, const double& highS1, const double& highS2, const int& nDivisions);
RcppExport SEXP _mmed_bothMissInt_unord(SEXP YSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP sig2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP XSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP rhoSEXP, SEXP ps1SEXP, SEXP ps2SEXP, SEXP lowS1SEXP, SEXP lowS2SEXP, SEXP highS1SEXP, SEXP highS2SEXP, SEXP nDivisionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type ps1(ps1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ps2(ps2SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS1(lowS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS2(lowS2SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS1(highS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS2(highS2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    rcpp_result_gen = Rcpp::wrap(bothMissInt_unord(Y, beta, Z, G, sig2, gamma_1, psi_1, gamma_2, psi_2, h1, h2, ksi_1, ksi_2, X, tau2_1, tau2_2, rho, ps1, ps2, lowS1, lowS2, highS1, highS2, nDivisions));
    return rcpp_result_gen;
END_RCPP
}
// bothMissPDF_unord
double bothMissPDF_unord(arma::vec x, const double& Y, arma::vec beta, arma::rowvec Z, const double& G, const double& sig2, const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, arma::vec ksi_1, arma::vec ksi_2, arma::rowvec X, const double& tau2_1, const double& tau2_2, const double& rho, const int& ps1, const int& ps2);
RcppExport SEXP _mmed_bothMissPDF_unord(SEXP xSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP sig2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP XSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP rhoSEXP, SEXP ps1SEXP, SEXP ps2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type ps1(ps1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ps2(ps2SEXP);
    rcpp_result_gen = Rcpp::wrap(bothMissPDF_unord(x, Y, beta, Z, G, sig2, gamma_1, psi_1, gamma_2, psi_2, h1, h2, ksi_1, ksi_2, X, tau2_1, tau2_2, rho, ps1, ps2));
    return rcpp_result_gen;
END_RCPP
}
// bothMissInt_unord_limits
arma::mat bothMissInt_unord_limits(const double& Y, arma::vec beta, arma::rowvec Z, const double& G, const double& sig2, const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, arma::vec ksi_1, arma::vec ksi_2, arma::rowvec X, const double& tau2_1, const double& tau2_2, const double& rho, const double& lowS1, const double& lowS2, const double& highS1, const double& highS2, const int missKey1, const int missKey2, const int nSteps, const double limit, const double stepCorrect);
RcppExport SEXP _mmed_bothMissInt_unord_limits(SEXP YSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP sig2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP XSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP rhoSEXP, SEXP lowS1SEXP, SEXP lowS2SEXP, SEXP highS1SEXP, SEXP highS2SEXP, SEXP missKey1SEXP, SEXP missKey2SEXP, SEXP nStepsSEXP, SEXP limitSEXP, SEXP stepCorrectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS1(lowS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS2(lowS2SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS1(highS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS2(highS2SEXP);
    Rcpp::traits::input_parameter< const int >::type missKey1(missKey1SEXP);
    Rcpp::traits::input_parameter< const int >::type missKey2(missKey2SEXP);
    Rcpp::traits::input_parameter< const int >::type nSteps(nStepsSEXP);
    Rcpp::traits::input_parameter< const double >::type limit(limitSEXP);
    Rcpp::traits::input_parameter< const double >::type stepCorrect(stepCorrectSEXP);
    rcpp_result_gen = Rcpp::wrap(bothMissInt_unord_limits(Y, beta, Z, G, sig2, gamma_1, psi_1, gamma_2, psi_2, h1, h2, ksi_1, ksi_2, X, tau2_1, tau2_2, rho, lowS1, lowS2, highS1, highS2, missKey1, missKey2, nSteps, limit, stepCorrect));
    return rcpp_result_gen;
END_RCPP
}
// bothMissInt_unord2
double bothMissInt_unord2(const double& Y, arma::vec beta, arma::rowvec Z, const double& G, const double& sig2, const double& gamma_1, const double& psi_1, const double& gamma_2, const double& psi_2, const double& h1, const double& h2, arma::vec ksi_1, arma::vec ksi_2, arma::vec ksi_3, arma::rowvec X, const double& tau2_1, const double& tau2_2, const double& tau2_3, const double& rho, const int& ps1, const int& ps2, const double& lowS1, const double& lowS2, const double& highS1, const double& highS2, const int missKey1, const int missKey2);
RcppExport SEXP _mmed_bothMissInt_unord2(SEXP YSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP sig2SEXP, SEXP gamma_1SEXP, SEXP psi_1SEXP, SEXP gamma_2SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ksi_3SEXP, SEXP XSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP tau2_3SEXP, SEXP rhoSEXP, SEXP ps1SEXP, SEXP ps2SEXP, SEXP lowS1SEXP, SEXP lowS2SEXP, SEXP highS1SEXP, SEXP highS2SEXP, SEXP missKey1SEXP, SEXP missKey2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ksi_3(ksi_3SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_3(tau2_3SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type ps1(ps1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ps2(ps2SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS1(lowS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type lowS2(lowS2SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS1(highS1SEXP);
    Rcpp::traits::input_parameter< const double& >::type highS2(highS2SEXP);
    Rcpp::traits::input_parameter< const int >::type missKey1(missKey1SEXP);
    Rcpp::traits::input_parameter< const int >::type missKey2(missKey2SEXP);
    rcpp_result_gen = Rcpp::wrap(bothMissInt_unord2(Y, beta, Z, G, sig2, gamma_1, psi_1, gamma_2, psi_2, h1, h2, ksi_1, ksi_2, ksi_3, X, tau2_1, tau2_2, tau2_3, rho, ps1, ps2, lowS1, lowS2, highS1, highS2, missKey1, missKey2));
    return rcpp_result_gen;
END_RCPP
}
// calc_expectation_twosim
List calc_expectation_twosim(const double gamma_1, const double gamma_2, const double psi_1, const double psi_2, const double h1, const double h2, const double rho, const double sig2, const double tau2_1, const double tau2_2, const arma::vec& Y, const arma::mat& Z, const arma::mat& X, const arma::vec& G, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, arma::vec S1, arma::vec R1, arma::vec S2, arma::vec R2, const arma::vec& LLD1, const arma::vec& ULD1, const arma::vec& LLD2, const arma::vec& ULD2, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_expectation_twosim(SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP rhoSEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP YSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP S1SEXP, SEXP R1SEXP, SEXP S2SEXP, SEXP R2SEXP, SEXP LLD1SEXP, SEXP ULD1SEXP, SEXP LLD2SEXP, SEXP ULD2SEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S2(S2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LLD1(LLD1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ULD1(ULD1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type LLD2(LLD2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ULD2(ULD2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_expectation_twosim(gamma_1, gamma_2, psi_1, psi_2, h1, h2, rho, sig2, tau2_1, tau2_2, Y, Z, X, G, beta, ksi_1, ksi_2, S1, R1, S2, R2, LLD1, ULD1, LLD2, ULD2, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_beta_gamma_inter_twosim
arma::vec calc_beta_gamma_inter_twosim(const arma::vec& Y, const arma::mat& Z, const arma::vec& G, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES2_2, const arma::vec& ES1ES2, const arma::vec& ES12ES2, const arma::vec& ES1ES22, const arma::vec& ES12ES22, bool int_gs1, bool int_gs2, bool int_s1s2, bool int_gs1s2);
RcppExport SEXP _mmed_calc_beta_gamma_inter_twosim(SEXP YSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES2_2SEXP, SEXP ES1ES2SEXP, SEXP ES12ES2SEXP, SEXP ES1ES22SEXP, SEXP ES12ES22SEXP, SEXP int_gs1SEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2_2(ES2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES2(ES1ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES2(ES12ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES22(ES1ES22SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES22(ES12ES22SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_beta_gamma_inter_twosim(Y, Z, G, ES1, ES1_2, ES2, ES2_2, ES1ES2, ES12ES2, ES1ES22, ES12ES22, int_gs1, int_gs2, int_s1s2, int_gs1s2));
    return rcpp_result_gen;
END_RCPP
}
// calc_sig2_twosim
double calc_sig2_twosim(const double& gamma_1, const double& gamma_2, const double& psi_1, const double& psi_2, const double& h1, const double& h2, bool& int_gs1, bool& int_gs2, bool& int_s1s2, bool& int_gs1s2, const arma::vec& Y, const arma::vec& beta, const arma::mat& Z, const arma::vec G, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES2_2, const arma::vec& ES1ES2, const arma::vec& ES12ES2, const arma::vec& ES1ES22, const arma::vec& ES12ES22);
RcppExport SEXP _mmed_calc_sig2_twosim(SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP int_gs1SEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP YSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP GSEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES2_2SEXP, SEXP ES1ES2SEXP, SEXP ES12ES2SEXP, SEXP ES1ES22SEXP, SEXP ES12ES22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< bool& >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool& >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool& >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool& >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2_2(ES2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES2(ES1ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES2(ES12ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES22(ES1ES22SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12ES22(ES12ES22SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_sig2_twosim(gamma_1, gamma_2, psi_1, psi_2, h1, h2, int_gs1, int_gs2, int_s1s2, int_gs1s2, Y, beta, Z, G, ES1, ES1_2, ES2, ES2_2, ES1ES2, ES12ES2, ES1ES22, ES12ES22));
    return rcpp_result_gen;
END_RCPP
}
// calc_ksi_twosim
arma::vec calc_ksi_twosim(const arma::mat& X, const arma::vec& ES);
RcppExport SEXP _mmed_calc_ksi_twosim(SEXP XSEXP, SEXP ESSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES(ESSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ksi_twosim(X, ES));
    return rcpp_result_gen;
END_RCPP
}
// calc_tau2_twosim
double calc_tau2_twosim(const arma::vec& ksi, const arma::mat& X, const arma::vec ES, const arma::vec ES2);
RcppExport SEXP _mmed_calc_tau2_twosim(SEXP ksiSEXP, SEXP XSEXP, SEXP ESSEXP, SEXP ES2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ES(ESSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ES2(ES2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_tau2_twosim(ksi, X, ES, ES2));
    return rcpp_result_gen;
END_RCPP
}
// calc_rho_twosim
double calc_rho_twosim(const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::mat& X, const double tau2_1, const double tau2_2, const arma::vec& ES1, const arma::vec& ES2, const arma::vec& ES1ES2);
RcppExport SEXP _mmed_calc_rho_twosim(SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP XSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP ES1SEXP, SEXP ES2SEXP, SEXP ES1ES2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1ES2(ES1ES2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_rho_twosim(ksi_1, ksi_2, X, tau2_1, tau2_2, ES1, ES2, ES1ES2));
    return rcpp_result_gen;
END_RCPP
}
// rhoInit
double rhoInit(const arma::vec& y1, const arma::vec& y2, const arma::mat& X);
RcppExport SEXP _mmed_rhoInit(SEXP y1SEXP, SEXP y2SEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(rhoInit(y1, y2, X));
    return rcpp_result_gen;
END_RCPP
}
// twoSimMed_EM
List twoSimMed_EM(const arma::vec& Y, const arma::vec& G, const arma::vec& S1, const arma::vec& R1, const arma::vec& S2, const arma::vec& R2, const arma::mat& Z, const arma::mat& X, const arma::vec& lowerS1, const arma::vec& upperS1, const arma::vec& lowerS2, const arma::vec& upperS2, bool int_gs1, bool int_gs2, bool int_s1s2, bool int_gs1s2, const double convLimit, const double iterationLimit, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_twoSimMed_EM(SEXP YSEXP, SEXP GSEXP, SEXP S1SEXP, SEXP R1SEXP, SEXP S2SEXP, SEXP R2SEXP, SEXP ZSEXP, SEXP XSEXP, SEXP lowerS1SEXP, SEXP upperS1SEXP, SEXP lowerS2SEXP, SEXP upperS2SEXP, SEXP int_gs1SEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP convLimitSEXP, SEXP iterationLimitSEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S2(S2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS1(lowerS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS1(upperS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS2(lowerS2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS2(upperS2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const double >::type convLimit(convLimitSEXP);
    Rcpp::traits::input_parameter< const double >::type iterationLimit(iterationLimitSEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(twoSimMed_EM(Y, G, S1, R1, S2, R2, Z, X, lowerS1, upperS1, lowerS2, upperS2, int_gs1, int_gs2, int_s1s2, int_gs1s2, convLimit, iterationLimit, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_Q_matrix_twosim
arma::mat calc_Q_matrix_twosim(const double& sig2, const double& tau2_1, const double& tau2_2, const double& rho, const arma::mat& Z, const arma::mat& X, const arma::vec& G, const arma::vec& ES1, const arma::vec& ES1_2, const arma::vec& ES2, const arma::vec& ES2_2, const arma::vec& ES1S2, const arma::vec& ES12S2, const arma::vec& ES1S22, const arma::vec& ES12S22, bool int_gs1, bool int_gs2, bool int_s1s2, bool int_gs1s2);
RcppExport SEXP _mmed_calc_Q_matrix_twosim(SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP rhoSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP GSEXP, SEXP ES1SEXP, SEXP ES1_2SEXP, SEXP ES2SEXP, SEXP ES2_2SEXP, SEXP ES1S2SEXP, SEXP ES12S2SEXP, SEXP ES1S22SEXP, SEXP ES12S22SEXP, SEXP int_gs1SEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1(ES1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1_2(ES1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2(ES2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES2_2(ES2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1S2(ES1S2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12S2(ES12S2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES1S22(ES1S22SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ES12S22(ES12S22SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Q_matrix_twosim(sig2, tau2_1, tau2_2, rho, Z, X, G, ES1, ES1_2, ES2, ES2_2, ES1S2, ES12S2, ES1S22, ES12S22, int_gs1, int_gs2, int_s1s2, int_gs1s2));
    return rcpp_result_gen;
END_RCPP
}
// calc_V_mat_twosim_S1
arma::mat calc_V_mat_twosim_S1(const double& gamma_1, const double& gamma_2, const double& psi_1, const double& psi_2, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& rho, const double& Y, const double& S_obs, const double& G, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X);
RcppExport SEXP _mmed_calc_V_mat_twosim_S1(SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP rhoSEXP, SEXP YSEXP, SEXP S_obsSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_V_mat_twosim_S1(gamma_1, gamma_2, psi_1, psi_2, h1, h2, sig2, tau2_1, tau2_2, rho, Y, S_obs, G, beta, ksi_1, ksi_2, Z, X));
    return rcpp_result_gen;
END_RCPP
}
// calc_V_mat_twosim_S2
arma::mat calc_V_mat_twosim_S2(const double& gamma_1, const double& gamma_2, const double& psi_1, const double& psi_2, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& rho, const double& Y, const double& S_obs, const double& G, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X);
RcppExport SEXP _mmed_calc_V_mat_twosim_S2(SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP rhoSEXP, SEXP YSEXP, SEXP S_obsSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_V_mat_twosim_S2(gamma_1, gamma_2, psi_1, psi_2, h1, h2, sig2, tau2_1, tau2_2, rho, Y, S_obs, G, beta, ksi_1, ksi_2, Z, X));
    return rcpp_result_gen;
END_RCPP
}
// calc_V_mat_twosim_S1S2
arma::mat calc_V_mat_twosim_S1S2(const double& gamma_1, const double& gamma_2, const double& psi_1, const double& psi_2, const double& h1, const double& h2, const double& sig2, const double& tau2_1, const double& tau2_2, const double& rho, const double& Y, const double& G, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const arma::rowvec& Z, const arma::rowvec& X);
RcppExport SEXP _mmed_calc_V_mat_twosim_S1S2(SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP rhoSEXP, SEXP YSEXP, SEXP GSEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP ZSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_V_mat_twosim_S1S2(gamma_1, gamma_2, psi_1, psi_2, h1, h2, sig2, tau2_1, tau2_2, rho, Y, G, beta, ksi_1, ksi_2, Z, X));
    return rcpp_result_gen;
END_RCPP
}
// calc_U_mat_twosim_onemiss
arma::mat calc_U_mat_twosim_onemiss(const double& gamma_same, const double& gamma_diff, const double& psi_same, const double& psi_diff, const double& h1, const double& h2, const double& rho, const double& tau2_same, const double& tau2_diff, const double& sig2, const double& Y, const double& G, const arma::rowvec& Z, const arma::rowvec& X, const double& S_obs, const double& R, const arma::vec& beta, const arma::vec& ksi_same, const arma::vec& ksi_diff, const double& LLD, const double& ULD, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_U_mat_twosim_onemiss(SEXP gamma_sameSEXP, SEXP gamma_diffSEXP, SEXP psi_sameSEXP, SEXP psi_diffSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP rhoSEXP, SEXP tau2_sameSEXP, SEXP tau2_diffSEXP, SEXP sig2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP S_obsSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ksi_sameSEXP, SEXP ksi_diffSEXP, SEXP LLDSEXP, SEXP ULDSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_same(gamma_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_diff(gamma_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_same(psi_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_diff(psi_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_same(tau2_sameSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_diff(tau2_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type S_obs(S_obsSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_same(ksi_sameSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_diff(ksi_diffSEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD(LLDSEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD(ULDSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_U_mat_twosim_onemiss(gamma_same, gamma_diff, psi_same, psi_diff, h1, h2, rho, tau2_same, tau2_diff, sig2, Y, G, Z, X, S_obs, R, beta, ksi_same, ksi_diff, LLD, ULD, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_U_mat_twosim_twomiss
arma::mat calc_U_mat_twosim_twomiss(const double& gamma_1, const double& gamma_2, const double& psi_1, const double& psi_2, const double& h1, const double& h2, const double& rho, const double& tau2_1, const double& tau2_2, const double& sig2, const double& Y, const double& G, const arma::rowvec& Z, const arma::rowvec& X, const double& R1, const double& R2, const arma::vec& beta, const arma::vec& ksi_1, const arma::vec& ksi_2, const double& LLD1, const double& ULD1, const double& LLD2, const double& ULD2, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_U_mat_twosim_twomiss(SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP rhoSEXP, SEXP tau2_1SEXP, SEXP tau2_2SEXP, SEXP sig2SEXP, SEXP YSEXP, SEXP GSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP R1SEXP, SEXP R2SEXP, SEXP betaSEXP, SEXP ksi_1SEXP, SEXP ksi_2SEXP, SEXP LLD1SEXP, SEXP ULD1SEXP, SEXP LLD2SEXP, SEXP ULD2SEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const double& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< const double& >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD1(LLD1SEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD1(ULD1SEXP);
    Rcpp::traits::input_parameter< const double& >::type LLD2(LLD2SEXP);
    Rcpp::traits::input_parameter< const double& >::type ULD2(ULD2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_U_mat_twosim_twomiss(gamma_1, gamma_2, psi_1, psi_2, h1, h2, rho, tau2_1, tau2_2, sig2, Y, G, Z, X, R1, R2, beta, ksi_1, ksi_2, LLD1, ULD1, LLD2, ULD2, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// calc_OMEGA_twosim
arma::mat calc_OMEGA_twosim(const arma::vec& Y, const arma::vec& G, arma::vec& S1, arma::vec& R1, arma::vec& S2, arma::vec& R2, const arma::vec& lowerS1, const arma::vec& upperS1, const arma::vec& lowerS2, const arma::vec& upperS2, const arma::vec& beta, const double& gamma_1, const double& gamma_2, const double& psi_1, const double& psi_2, const double& h1, const double& h2, const double& sig2, const arma::vec& ksi_2, const double& tau2_2, const arma::vec& ksi_1, const double& tau2_1, const double& rho, const arma::mat& Z, const arma::mat& X, bool int_gs1, bool int_gs2, bool int_s1s2, bool int_gs1s2, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_calc_OMEGA_twosim(SEXP YSEXP, SEXP GSEXP, SEXP S1SEXP, SEXP R1SEXP, SEXP S2SEXP, SEXP R2SEXP, SEXP lowerS1SEXP, SEXP upperS1SEXP, SEXP lowerS2SEXP, SEXP upperS2SEXP, SEXP betaSEXP, SEXP gamma_1SEXP, SEXP gamma_2SEXP, SEXP psi_1SEXP, SEXP psi_2SEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP sig2SEXP, SEXP ksi_2SEXP, SEXP tau2_2SEXP, SEXP ksi_1SEXP, SEXP tau2_1SEXP, SEXP rhoSEXP, SEXP ZSEXP, SEXP XSEXP, SEXP int_gs1SEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type S2(S2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS1(lowerS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS1(upperS1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowerS2(lowerS2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upperS2(upperS2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_1(psi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type psi_2(psi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const double& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_2(ksi_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_2(tau2_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi_1(ksi_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tau2_1(tau2_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_OMEGA_twosim(Y, G, S1, R1, S2, R2, lowerS1, upperS1, lowerS2, upperS2, beta, gamma_1, gamma_2, psi_1, psi_2, h1, h2, sig2, ksi_2, tau2_2, ksi_1, tau2_1, rho, Z, X, int_gs1, int_gs2, int_s1s2, int_gs1s2, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// deltaCI_twosim
List deltaCI_twosim(const long double& mu1, const long double& sig1, const long double& mu2, const long double& sig2, const long double& sig12, const double& indL, const long double& mu3, const long double& sig3, const long double& sig13, const long double& sig23, const double alpha);
RcppExport SEXP _mmed_deltaCI_twosim(SEXP mu1SEXP, SEXP sig1SEXP, SEXP mu2SEXP, SEXP sig2SEXP, SEXP sig12SEXP, SEXP indLSEXP, SEXP mu3SEXP, SEXP sig3SEXP, SEXP sig13SEXP, SEXP sig23SEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long double& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig1(sig1SEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig12(sig12SEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const long double& >::type mu3(mu3SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig3(sig3SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig13(sig13SEXP);
    Rcpp::traits::input_parameter< const long double& >::type sig23(sig23SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(deltaCI_twosim(mu1, sig1, mu2, sig2, sig12, indL, mu3, sig3, sig13, sig23, alpha));
    return rcpp_result_gen;
END_RCPP
}
// bootstrapCI_twosim
List bootstrapCI_twosim(const arma::vec& y, const arma::vec& g, const arma::vec& s1, const arma::vec& r1, const arma::vec& s2, const arma::vec& r2, const arma::mat& Z, const arma::mat& X, const arma::vec& lowers1, const arma::vec& uppers1, const arma::vec& lowers2, const arma::vec& uppers2, const double& delta1, const double& delta2, const double& alpha, bool int_gs1, bool int_gs2, bool int_s1s2, bool int_gs1s2, const double& indL, const unsigned int bootStrapN, const double convLimit, const double iterationLimit, const int& nDivisions, const int MEASURE_TYPE_KNOWN, const int MEASURE_TYPE_MISSING, const int MEASURE_TYPE_BELOW_DETECTION_LIMIT, const int MEASURE_TYPE_ABOVE_DETECTION_LIMIT);
RcppExport SEXP _mmed_bootstrapCI_twosim(SEXP ySEXP, SEXP gSEXP, SEXP s1SEXP, SEXP r1SEXP, SEXP s2SEXP, SEXP r2SEXP, SEXP ZSEXP, SEXP XSEXP, SEXP lowers1SEXP, SEXP uppers1SEXP, SEXP lowers2SEXP, SEXP uppers2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP alphaSEXP, SEXP int_gs1SEXP, SEXP int_gs2SEXP, SEXP int_s1s2SEXP, SEXP int_gs1s2SEXP, SEXP indLSEXP, SEXP bootStrapNSEXP, SEXP convLimitSEXP, SEXP iterationLimitSEXP, SEXP nDivisionsSEXP, SEXP MEASURE_TYPE_KNOWNSEXP, SEXP MEASURE_TYPE_MISSINGSEXP, SEXP MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP, SEXP MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowers1(lowers1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type uppers1(uppers1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lowers2(lowers2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type uppers2(uppers2SEXP);
    Rcpp::traits::input_parameter< const double& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const double& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1(int_gs1SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs2(int_gs2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_s1s2(int_s1s2SEXP);
    Rcpp::traits::input_parameter< bool >::type int_gs1s2(int_gs1s2SEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type bootStrapN(bootStrapNSEXP);
    Rcpp::traits::input_parameter< const double >::type convLimit(convLimitSEXP);
    Rcpp::traits::input_parameter< const double >::type iterationLimit(iterationLimitSEXP);
    Rcpp::traits::input_parameter< const int& >::type nDivisions(nDivisionsSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_KNOWN(MEASURE_TYPE_KNOWNSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_MISSING(MEASURE_TYPE_MISSINGSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_BELOW_DETECTION_LIMIT(MEASURE_TYPE_BELOW_DETECTION_LIMITSEXP);
    Rcpp::traits::input_parameter< const int >::type MEASURE_TYPE_ABOVE_DETECTION_LIMIT(MEASURE_TYPE_ABOVE_DETECTION_LIMITSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapCI_twosim(y, g, s1, r1, s2, r2, Z, X, lowers1, uppers1, lowers2, uppers2, delta1, delta2, alpha, int_gs1, int_gs2, int_s1s2, int_gs1s2, indL, bootStrapN, convLimit, iterationLimit, nDivisions, MEASURE_TYPE_KNOWN, MEASURE_TYPE_MISSING, MEASURE_TYPE_BELOW_DETECTION_LIMIT, MEASURE_TYPE_ABOVE_DETECTION_LIMIT));
    return rcpp_result_gen;
END_RCPP
}
// mcCI_twosim
List mcCI_twosim(const arma::vec& mu, const arma::mat& sig, const arma::vec& delta, const double& indL, const double nIt, const double alpha);
RcppExport SEXP _mmed_mcCI_twosim(SEXP muSEXP, SEXP sigSEXP, SEXP deltaSEXP, SEXP indLSEXP, SEXP nItSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type indL(indLSEXP);
    Rcpp::traits::input_parameter< const double >::type nIt(nItSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcCI_twosim(mu, sig, delta, indL, nIt, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mmed_fastLm", (DL_FUNC) &_mmed_fastLm, 2},
    {"_mmed_fastLmSig", (DL_FUNC) &_mmed_fastLmSig, 2},
    {"_mmed_fastLmSig_int", (DL_FUNC) &_mmed_fastLmSig_int, 3},
    {"_mmed_calc_a_val", (DL_FUNC) &_mmed_calc_a_val, 5},
    {"_mmed_calc_b_val", (DL_FUNC) &_mmed_calc_b_val, 11},
    {"_mmed_calc_expectation", (DL_FUNC) &_mmed_calc_expectation, 18},
    {"_mmed_calc_beta_gamma_psi", (DL_FUNC) &_mmed_calc_beta_gamma_psi, 6},
    {"_mmed_calc_sig2", (DL_FUNC) &_mmed_calc_sig2, 9},
    {"_mmed_calc_ksi", (DL_FUNC) &_mmed_calc_ksi, 2},
    {"_mmed_calc_tau2", (DL_FUNC) &_mmed_calc_tau2, 4},
    {"_mmed_oneMed_EM", (DL_FUNC) &_mmed_oneMed_EM, 15},
    {"_mmed_calc_Q_matrix", (DL_FUNC) &_mmed_calc_Q_matrix, 8},
    {"_mmed_calc_V_mat", (DL_FUNC) &_mmed_calc_V_mat, 10},
    {"_mmed_calc_U_mat", (DL_FUNC) &_mmed_calc_U_mat, 17},
    {"_mmed_calc_OMEGA", (DL_FUNC) &_mmed_calc_OMEGA, 19},
    {"_mmed_deltaCI_one", (DL_FUNC) &_mmed_deltaCI_one, 11},
    {"_mmed_bootstrapCI_one", (DL_FUNC) &_mmed_bootstrapCI_one, 19},
    {"_mmed_mcCI_one", (DL_FUNC) &_mmed_mcCI_one, 6},
    {"_mmed_mcp_calc_one", (DL_FUNC) &_mmed_mcp_calc_one, 6},
    {"_mmed_prodExPDF", (DL_FUNC) &_mmed_prodExPDF, 13},
    {"_mmed_exFindLower", (DL_FUNC) &_mmed_exFindLower, 11},
    {"_mmed_exFindUpper", (DL_FUNC) &_mmed_exFindUpper, 11},
    {"_mmed_exProdCDF", (DL_FUNC) &_mmed_exProdCDF, 12},
    {"_mmed_exProdCI", (DL_FUNC) &_mmed_exProdCI, 13},
    {"_mmed_mySign", (DL_FUNC) &_mmed_mySign, 1},
    {"_mmed_prodPDF_c", (DL_FUNC) &_mmed_prodPDF_c, 12},
    {"_mmed_findLower", (DL_FUNC) &_mmed_findLower, 11},
    {"_mmed_findUpper", (DL_FUNC) &_mmed_findUpper, 11},
    {"_mmed_prodCDF", (DL_FUNC) &_mmed_prodCDF, 11},
    {"_mmed_prodCI", (DL_FUNC) &_mmed_prodCI, 13},
    {"_mmed_calc_a1_val_twoseq", (DL_FUNC) &_mmed_calc_a1_val_twoseq, 11},
    {"_mmed_calc_b1_val_twoseq", (DL_FUNC) &_mmed_calc_b1_val_twoseq, 20},
    {"_mmed_calc_a2_val_twoseq", (DL_FUNC) &_mmed_calc_a2_val_twoseq, 8},
    {"_mmed_calc_b2_val_twoseq", (DL_FUNC) &_mmed_calc_b2_val_twoseq, 17},
    {"_mmed_calc_c1_val_twoseq", (DL_FUNC) &_mmed_calc_c1_val_twoseq, 10},
    {"_mmed_calc_d1_val_twoseq", (DL_FUNC) &_mmed_calc_d1_val_twoseq, 20},
    {"_mmed_calc_c2_val_twoseq", (DL_FUNC) &_mmed_calc_c2_val_twoseq, 10},
    {"_mmed_calc_d2_val_twoseq", (DL_FUNC) &_mmed_calc_d2_val_twoseq, 20},
    {"_mmed_calc_corr_b_twoseq", (DL_FUNC) &_mmed_calc_corr_b_twoseq, 11},
    {"_mmed_calc_corr_rho_twoseq", (DL_FUNC) &_mmed_calc_corr_rho_twoseq, 1},
    {"_mmed_bothMissInt_ord", (DL_FUNC) &_mmed_bothMissInt_ord, 26},
    {"_mmed_bothMissInt_ord_limits", (DL_FUNC) &_mmed_bothMissInt_ord_limits, 27},
    {"_mmed_calc_expectation_twoseq", (DL_FUNC) &_mmed_calc_expectation_twoseq, 32},
    {"_mmed_calc_beta_tilde_gamma2_twoseq", (DL_FUNC) &_mmed_calc_beta_tilde_gamma2_twoseq, 15},
    {"_mmed_calc_sig2_twoseq", (DL_FUNC) &_mmed_calc_sig2_twoseq, 22},
    {"_mmed_calc_ksi2_gamma1_twoseq", (DL_FUNC) &_mmed_calc_ksi2_gamma1_twoseq, 8},
    {"_mmed_calc_ksi1_twoseq", (DL_FUNC) &_mmed_calc_ksi1_twoseq, 2},
    {"_mmed_calc_tau2_twoseq", (DL_FUNC) &_mmed_calc_tau2_twoseq, 11},
    {"_mmed_calc_tau1_twoseq", (DL_FUNC) &_mmed_calc_tau1_twoseq, 4},
    {"_mmed_twoSeqMed_EM", (DL_FUNC) &_mmed_twoSeqMed_EM, 25},
    {"_mmed_calc_Q_matrix_twoseq", (DL_FUNC) &_mmed_calc_Q_matrix_twoseq, 20},
    {"_mmed_calc_V_mat_twoseq_S1", (DL_FUNC) &_mmed_calc_V_mat_twoseq_S1, 20},
    {"_mmed_calc_V_mat_twoseq_S2", (DL_FUNC) &_mmed_calc_V_mat_twoseq_S2, 20},
    {"_mmed_calc_V_mat_twoseq_S1S2", (DL_FUNC) &_mmed_calc_V_mat_twoseq_S1S2, 19},
    {"_mmed_calc_U_mat_twoseq_S1miss", (DL_FUNC) &_mmed_calc_U_mat_twoseq_S1miss, 27},
    {"_mmed_calc_U_mat_twoseq_S2miss", (DL_FUNC) &_mmed_calc_U_mat_twoseq_S2miss, 26},
    {"_mmed_calc_U_mat_twoseq_twomiss", (DL_FUNC) &_mmed_calc_U_mat_twoseq_twomiss, 30},
    {"_mmed_calc_OMEGA_twoseq", (DL_FUNC) &_mmed_calc_OMEGA_twoseq, 37},
    {"_mmed_deltaCI_twoseq", (DL_FUNC) &_mmed_deltaCI_twoseq, 22},
    {"_mmed_bootstrapCI_twoseq", (DL_FUNC) &_mmed_bootstrapCI_twoseq, 29},
    {"_mmed_mcCI_twoseq", (DL_FUNC) &_mmed_mcCI_twoseq, 6},
    {"_mmed_calc_a_val_twosim", (DL_FUNC) &_mmed_calc_a_val_twosim, 9},
    {"_mmed_calc_b_val_twosim", (DL_FUNC) &_mmed_calc_b_val_twosim, 18},
    {"_mmed_calc_c_val_twosim", (DL_FUNC) &_mmed_calc_c_val_twosim, 9},
    {"_mmed_calc_d_val_twosim", (DL_FUNC) &_mmed_calc_d_val_twosim, 18},
    {"_mmed_calc_corr_b_twosim", (DL_FUNC) &_mmed_calc_corr_b_twosim, 11},
    {"_mmed_calc_corr_r_twosim", (DL_FUNC) &_mmed_calc_corr_r_twosim, 1},
    {"_mmed_bothMissInt_unord", (DL_FUNC) &_mmed_bothMissInt_unord, 24},
    {"_mmed_bothMissPDF_unord", (DL_FUNC) &_mmed_bothMissPDF_unord, 20},
    {"_mmed_bothMissInt_unord_limits", (DL_FUNC) &_mmed_bothMissInt_unord_limits, 26},
    {"_mmed_bothMissInt_unord2", (DL_FUNC) &_mmed_bothMissInt_unord2, 27},
    {"_mmed_calc_expectation_twosim", (DL_FUNC) &_mmed_calc_expectation_twosim, 30},
    {"_mmed_calc_beta_gamma_inter_twosim", (DL_FUNC) &_mmed_calc_beta_gamma_inter_twosim, 15},
    {"_mmed_calc_sig2_twosim", (DL_FUNC) &_mmed_calc_sig2_twosim, 22},
    {"_mmed_calc_ksi_twosim", (DL_FUNC) &_mmed_calc_ksi_twosim, 2},
    {"_mmed_calc_tau2_twosim", (DL_FUNC) &_mmed_calc_tau2_twosim, 4},
    {"_mmed_calc_rho_twosim", (DL_FUNC) &_mmed_calc_rho_twosim, 8},
    {"_mmed_rhoInit", (DL_FUNC) &_mmed_rhoInit, 3},
    {"_mmed_twoSimMed_EM", (DL_FUNC) &_mmed_twoSimMed_EM, 23},
    {"_mmed_calc_Q_matrix_twosim", (DL_FUNC) &_mmed_calc_Q_matrix_twosim, 19},
    {"_mmed_calc_V_mat_twosim_S1", (DL_FUNC) &_mmed_calc_V_mat_twosim_S1, 18},
    {"_mmed_calc_V_mat_twosim_S2", (DL_FUNC) &_mmed_calc_V_mat_twosim_S2, 18},
    {"_mmed_calc_V_mat_twosim_S1S2", (DL_FUNC) &_mmed_calc_V_mat_twosim_S1S2, 17},
    {"_mmed_calc_U_mat_twosim_onemiss", (DL_FUNC) &_mmed_calc_U_mat_twosim_onemiss, 25},
    {"_mmed_calc_U_mat_twosim_twomiss", (DL_FUNC) &_mmed_calc_U_mat_twosim_twomiss, 28},
    {"_mmed_calc_OMEGA_twosim", (DL_FUNC) &_mmed_calc_OMEGA_twosim, 34},
    {"_mmed_deltaCI_twosim", (DL_FUNC) &_mmed_deltaCI_twosim, 11},
    {"_mmed_bootstrapCI_twosim", (DL_FUNC) &_mmed_bootstrapCI_twosim, 28},
    {"_mmed_mcCI_twosim", (DL_FUNC) &_mmed_mcCI_twosim, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_mmed(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
